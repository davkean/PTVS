<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!-- 
    For more info about signing and what certs to use, see the following links:
    https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/650/MicroBuild-Signing
    https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/658/Signing-Cert-Guidance
  -->
  
  <PropertyGroup>
    <IntermediateOutputPathSuffix>signlayout\</IntermediateOutputPathSuffix>
  </PropertyGroup>

  <Import Project="SetupProjectBefore.settings" />
  <Import Project="$(TargetsPath)\Common.Shim.targets" />
  
  <PropertyGroup>
    <OutputPath>$(BinariesOutputPath)</OutputPath>
    <OutDir>$(BinariesOutputPath)</OutDir>
  </PropertyGroup>
  
  <ItemDefinitionGroup>
    <ManagedFiles>
      <ResourceName>%(Filename).resources%(Extension)</ResourceName>
    </ManagedFiles>
  </ItemDefinitionGroup>
  
  <ItemGroup>
    <_Languages Include="$(Languages)" />
  
    <ManagedFiles Include="
        Microsoft.PythonTools.Attacher.exe;
        Microsoft.PythonTools.AttacherX86.exe;
        Microsoft.PythonTools.BuildTasks.dll;
        Microsoft.PythonTools.BuildTasks.Core.dll;
        Microsoft.PythonTools.Common.dll;
        Microsoft.PythonTools.Debugger.dll;
        Microsoft.PythonTools.Debugger.Concord.dll;
        Microsoft.PythonTools.dll;
        Microsoft.PythonTools.EnvironmentsList.dll;
        Microsoft.PythonTools.Profiling.dll;
        Microsoft.PythonTools.ProjectWizards.dll;
        Microsoft.PythonTools.RunElevated.exe;
        Microsoft.PythonTools.TestAdapter.dll;
        Microsoft.PythonTools.TestAdapter.Executor.dll;
        Microsoft.PythonTools.VSCommon.dll;
        Microsoft.PythonTools.VSInterpreters.dll;
        Microsoft.PythonTools.WebRole.dll;
        Microsoft.PythonTools.Workspace.dll;
        Microsoft.CookiecutterTools.dll;
        Microsoft.PythonTools.Ipc.Json.DLL;
        "/>

    <ManagedFiles Include="
        Microsoft.PythonTools.Django.dll;
        " Condition="$(IncludeDjango)" />
    <ManagedFiles Include="
        Microsoft.PythonTools.Debugger.VCLauncher.dll;
        " Condition="$(IncludeVCDebugLauncher)" />

    <UnmanagedFiles Include="
        Microsoft.PythonTools.Debugger.Helper.x64.dll;
        Microsoft.PythonTools.Debugger.Helper.x86.dll;
        PyDebugAttach.dll;
        PyDebugAttachX86.dll;
        VsPyProf.dll;
        VsPyProfX86.dll;
        "/>

    <FilesToSign Include="@(ManagedFiles->'$(BinariesOutputPath)%(Identity)')">
      <Authenticode>Microsoft400</Authenticode>
      <StrongName Condition="!$([msbuild]::ValueOrDefault(%(SkipStrongName), `false`))">StrongName</StrongName>
      <SignedPath>$(BinariesOutputPath)%(Filename)%(Extension)</SignedPath>
      <UnsignedPath>$(UnsignedOutputPath)%(Filename)%(Extension)</UnsignedPath>
    </FilesToSign>

    <FilesToSign Include="@(UnmanagedFiles->'$(BinariesOutputPath)%(Identity)')">
      <Authenticode>Microsoft400</Authenticode>
      <SignedPath>$(BinariesOutputPath)%(Filename)%(Extension)</SignedPath>
      <UnsignedPath>$(UnsignedOutputPath)%(Filename)%(Extension)</UnsignedPath>
    </FilesToSign>
  </ItemGroup>

  <Target Name="_AddLocFiles" BeforeTargets="_PreserveUnsigned;ListFiles">
    <ItemGroup>
      <LocFilesToSign Include="$(BinariesOutputPath)localize\**\*.resources.dll" />
      <FilesToSign Include="@(LocFilesToSign)">
        <Authenticode>Microsoft400</Authenticode>
        <StrongName>StrongName</StrongName>
        <SignedPath>$(BinariesOutputPath)localize\%(RecursiveDir)%(Filename)%(Extension)</SignedPath>
        <UnsignedPath>$(UnsignedOutputPath)%(RecursiveDir)%(Filename)%(Extension)</UnsignedPath>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <Target Name="_AddPylanceFiles" BeforeTargets="_PreserveUnsigned;ListFiles">
    <ItemGroup>
      <PylanceFilesToSign Include="$(BinariesOutputPath)pylance\**\*.js" />
      <FilesToSign Include="@(PylanceFilesToSign)">
        <Authenticode>Microsoft400</Authenticode>
        <StrongName></StrongName>
        <SignedPath>$(BinariesOutputPath)pylance\%(RecursiveDir)%(Filename)%(Extension)</SignedPath>
        <UnsignedPath>$(UnsignedOutputPath)%(RecursiveDir)%(Filename)%(Extension)</UnsignedPath>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <!-- 
    These 3rd party files do not exist in the binary output path. They are already in the layout path, waiting to be packaged into a vsix. 
    Because of this, they don't need to be copied anywhere, they are just signed "in place", before the vsix is signed.
  -->
  <Target Name="_AddTemplateFiles" BeforeTargets="_PreserveUnsigned;ListFiles">
    <ItemGroup>
      <TemplateFilesToSign Include="$(LayoutOutputPath)Microsoft.PythonTools.Templates\ProjectTemplates\Python\Web\**\*.js"/>
      <TemplateFilesToSign Include="$(LayoutOutputPath)Microsoft.PythonTools.Templates\ProjectTemplates\Python\Web\**\*.ttf"/>
      <FilesToSign Include="@(TemplateFilesToSign)">
        <Authenticode>3PartyScriptsSHA2</Authenticode>
        <StrongName></StrongName>
        <SignedPath>$(LayoutOutputPath)Microsoft.PythonTools.Templates\ProjectTemplates\Python\Web\%(RecursiveDir)%(Filename)%(Extension)</SignedPath>
        <UnsignedPath>$(UnsignedOutputPath)%(RecursiveDir)%(Filename)%(Extension)</UnsignedPath>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <Target Name="_PreserveUnsigned" Inputs="%(FilesToSign.FullPath)" Outputs="%(FilesToSign.UnsignedPath)" BeforeTargets="SignFiles">
    <Copy SourceFiles="%(FilesToSign.FullPath)" DestinationFiles="%(FilesToSign.UnsignedPath)" />
  </Target>

  <Target Name="ListFiles">
    <Message Text="OutputPath: $(OutputPath)" Importance="high" />
    <Message Text="@(FilesToSign->'%(Identity) (%(Authenticode), %(StrongName)) - %(SignedPath)', '
')" Importance="high" />
  </Target>

  <Target Name="_GetBinariesInLayout">
    <ItemGroup>
      <_BinariesInLayout Include="$(LayoutOutputPath)**\*.exe;$(LayoutOutputPath)**\*.dll" />
      <_BinariesWithSignedSource Include="$(BinariesOutputPath)%(_BinariesInLayout.Filename)%(_BinariesInLayout.Extension)">
        <TargetPath>%(_BinariesInLayout.FullPath)</TargetPath>
      </_BinariesWithSignedSource>
      <_BinariesToCopy Include="@(_BinariesWithSignedSource)" Condition="Exists(%(FullPath))" />
    </ItemGroup>
  </Target>

  <Target Name="_GetJSFilesInLayout">
    <ItemGroup>
      <!-- Special case the pylance files -->
      <_FilesInLayout Include="$(LayoutOutputPath)\Microsoft.PythonTools.Core\pylance\**\*.js" />
      <_FilesWithSignedSource Include="$(BinariesOutputPath)pylance\%(_FilesInLayout.RecursiveDir)%(_FilesInLayout.Filename)%(_FilesInLayout.Extension)">
        <TargetPath>%(_FilesInLayout.FullPath)</TargetPath>
      </_FilesWithSignedSource>
      <_BinariesToCopy Include="@(_FilesWithSignedSource)" Condition="Exists(%(FullPath))" />
    </ItemGroup>
  </Target>


  <Target Name="_UpdateLayoutWithSignedBinaries"
          DependsOnTargets="_GetBinariesInLayout;_GetJsFilesInLayout"
          AfterTargets="SignFiles">
    <Copy SourceFiles="%(_BinariesToCopy.FullPath)" DestinationFiles="%(_BinariesToCopy.TargetPath)" />
  </Target>

  <Import Project="$(TargetsPath)\MicroBuild.targets" />
</Project>
